import io
import msoffcrypto
from openpyxl import load_workbook

def read_double_protected_excel(file_path, open_password, write_password=None):
    """
    Read an Excel file with both open and write protection
    
    Args:
        file_path: Path to the Excel file
        open_password: Password to open the file
        write_password: Password to remove write protection (optional)
    
    Returns:
        Dictionary of {sheet_name: pandas DataFrame}
    """
    # Read the encrypted file
    with open(file_path, 'rb') as f:
        encrypted = io.BytesIO(f.read())
    
    # First decryption - open password
    decrypted = io.BytesIO()
    try:
        office_file = msoffcrypto.OfficeFile(encrypted)
        office_file.load_key(password=open_password)
        office_file.decrypt(decrypted)
        decrypted.seek(0)
    except Exception as e:
        raise ValueError(f"Failed to decrypt with open password: {str(e)}")
    
    # Handle write protection using openpyxl
    try:
        wb = load_workbook(decrypted)
        
        # If workbook is write-protected and password is provided
        if wb.security.lockStructure and write_password:
            wb.security.workbookPassword = write_password
            wb.security.lockStructure = False
        
        # Convert to pandas DataFrames
        result = {}
        for sheet_name in wb.sheetnames:
            sheet = wb[sheet_name]
            data = sheet.values
            cols = next(data)
            result[sheet_name] = pd.DataFrame(data, columns=cols)
        
        return result
    
    except Exception as e:
        raise ValueError(f"Failed to handle write protection: {str(e)}")

# Example usage:
# data = read_double_protected_excel(
#     'double_protected.xlsx',
#     open_password='open123',
#     write_password='edit456'
# )
